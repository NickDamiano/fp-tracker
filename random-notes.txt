
unregister isn't working anymore
register works and parse registration works but it won't hit the parse registration method because original message isn't hit because pending response isn't true. figure out how to get pending response to flag or find another way to match. I guess you could try Message.find_by(to: sender).last and if that matches to registration then hit it up.

Then do the duplicates test and then the else stuff at the bottom of the message parser.



Message - 
2 - duplicates test
3 - parser bottom of the test for else statements

Possibly add an intercept checker to parse out characters that aren't allowed and send a rejection message - this would be for all incoming messages. 

Go through all comments
erase prybyebug stuff

run owasp things?

seed a few more star wars characters in. maybe some rogue one or episode 7

8- clean up gemfile
11- Get rid of unused controllers and models
12- Fix the callback method

15 - update secret key and put it into env
16 - delete non master branches
17 - create input validation for server / client - client isn't necessary since it's text messages not web form
18 - create cron job for database seeder re-creation
21 - make a demo video for the quick version 
24 - FINISH? MOVE ON?

stretch
10 - update readme so anyone who wants to test it can make their own version
23 - Make a blog post on it.
22- make a tutorial on how to use the text messaging thing and do tests with it
24 - Make a demo video for long explanation
20 - possibly remove the admin piece that checks the location of everyone - at least get rid of the hacky thing you did and make it work right or just pull it out completely and modify the code that checks. just add a note that's where the code would be.



Make table columns look sortable
Finish testing
Add cron job to clean up database once a day
Review code to clean up comments and unfinished tests
Review duplicate sender to understand for demo
Create short demo explaining why it was developed and examples of it in use. future use
Create long demo where you walk through the entire thing for mostly future nick benefit











10) Texting demo
11) How it works demo
12) Done!
13) Add simple regexer for last name misspelled
14) Add accountability checker - messages all active and as answers come in, it gives the updated percentage to the managers
15) Add middle name column that is then messed with if you have two of the exact same names. 
16) So you can have a site showing the people being tracked and sort them by location that's updated by ajax every time the db is updated. on the left is a chat window for you to interact with the db like a tech demo. 


12) Fuzzy spell checker
13) ETA
14) Evening alert
15) Create passthrough
16) Toggle auto-forward

NEXT - Acknowledge message for database update
Build /demo page that has a text box which scrolls as text is put into it. duplicate that. how does it send the number from the form. keep it from submitting after you type a text
24 hour reset for database cronjob. 

Maybe sitrep should group the locations rather than do alphabetical ?
OR it can group names by the group they were texted with so you can see, damiano, sievert, hukill are at psab. maybe it writes it that way. 

Stretch some day:

4) Gather messages for duplicates and non-duplicates



TODO
1 - spell checker - fuzzy gem
2 - Garbage cleaner rake task - 
	figure out cleaner for each model
3 - Create seed for star wars demo or different theme demo
	It would be cool if the fake phones on there were like real
	phones with pictures of the character so it replicated the 
	texts well. including green and blue messages. 
6 - Add front page where names and info can be edited (with password)
	investigate on the right way to do this
	Iterate through each record and display all stuff followed by edit, delete buttons and after you hit edit it makes a save button
	make it look pretty
	add authentication
7 - Add text based personnel add/remove/update for manager
8 - add acknowledgement texts when marked in transit and arrived
9 - Add ETA feature
10 - Add evening alert
11 - create passthrough texting feature
12 - Toggle autoforward
13 - instructions response for help
14 - needs to be a way to gather all messages for departure arrival and send a summary to ricci so it's just one alert. at a minimum, it takes destinations that are spelled the same and consolidates them for alerts.
15 - code cleanup
16 - review
17 - how it works video
18 - texting light demo
19 - create /demo path that has a thing you can type in, like
chat window, and have it communicate with the controller

Maybe there's a thing where if someone in country hasn't updated their status in more than a day it automatically asks them for an update?

front end part
- gets employees in controller before redirecting to the page
- iterates through each employee and lists all fields across in some sort of table
- edit button next to each one, if you click it, it changes all fields to be edited.
- once you finish editing it you can click save and it gets that data and updates the database
- you can also add a new employee or delete each employee
- each line/employee has an edit and a save button. 
	- on edit, it changes that line to a bunch of forms. then on save it calls update on the database and does something to prevent sql injection
- 


ack message - if no duplicates call the ack message,
if duplicates, after pending messages cleared call ack message







# For future improvements for message class

	# In the future, maybe we want to send messages that are causing problems
	# on to the manager so he can get all messages during an emergency sent to this
	# number. This would be added at the bottom of the parse method under else block

	# def self.forward_unparsed(message, sender)
	# 	# send unparsed to admin to figure out why
	# 	to = 
	# 	Message.send_message(message)
	# end
	# Track message exchange
	# def self.message_history(message, sender)
	# 	result = MessageActions.history(message, sender)
	# 	# send all messages back to sender from now until hours back
	# end

	# Admin register users via text
	# This could be tied into the employee register. which could be extracted to serve both that and this purpose
	# def self.add_employee(message)
	# 	result = MessageActions.add_employee(message)
	# 	# maybe this is done by the employee by texting and it asks a series of questions 
	# 		# and then registers them after confirming all information is correct. 
	# 	# admin message
	# end

	# Admin deletes user by text
	# def self.remove_employee(message)
	# 	# removes employees leaving permanently
	# 	# admin message
	# end

	# when an employee leaves country, update system via text. Also change saudi to 'country'
	# def self.toggle_employee_saudi_presence(employee)
	# 	# if employee leaves the country or arrives, toggle their status so they
	# 	# don't receive alerts and are marked as out of saudi
	# 	# admin message
	# end

	# Admin can have all texts coming into system get forwarded to him so he has full visibility like he used to.
	# def self.toggle_autoforward(sender)
	# 	# look at sender. check autoforward status and toggle
	# 	# check to see if user has autoforward privledges?
	# end

	# Gets specific employee's location
	# def self.report_location(message, sender)
	# 	result = MessageActions.report_location(message)
	# end